0) Кажется, пора покрывать код документацией!
1) Не очень тру, что детектор - логическая переменная.
   Можно заменить на интовую или, ещё лучше, enum.
   Потому что нет гарантии, что будет всего 2 варианта
2) Аналогично в Minimizable
3) Интерфейсный класс минимизации вынести в отдельный файл
4) Залей вольфрамовский скрипт, по которому считались корни квадратуры
5) Все нужные дебажные выводы спрятать под define, ненужные - выпилить
6) Не используй пары. Лучше замени структурами, где будет нормально описано каждое поле
7) Кажется, что код обратных задач можно хорошо так объединить
8) Нужно покрыть неймспейсами проект - AD_NS, MC_NS, UTILS_NS, например
9) Добавить ассерты на входные параметры функций
10) Добавить тестов для более низкоуровневых функций (Френель, например)
11) Вынести "физику" в отдельную папку
12) Не тру, когда у функции 100500 параметров. Нужно их группировать в структуры
13) В Монте-карло мы должны уметь считать и сохранять в разных типах данных.
    Это будет очень полезно - считать в даблах, а для экономии памяти хранить данные
    (детекторы, например, и в будущем другие данные) - во флоатах
14) В AD мы сейчас используем матрицы на стеке. Это здорово, но мы должны знать их размер в процессе компиляции,
    т.е. прога получается "средней универсальности". В принципе, это не так важно,
    но можно попробовать заменить на динамические и посмотреть просадку по производительности (а вдруг почти не будет?)
15) Не нужно использовать snake_case, мы не в пайтоне)
16) Перформанс тесты (с калибровкой на appveyor)
